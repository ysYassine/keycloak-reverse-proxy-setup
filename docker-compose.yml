services:
  reverse-proxy:
    image: caddy:2.9.1-alpine
    ports:
      - "443:443" # HTTPS port
      - "80:80" # HTTP port
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro # Mount the Caddyfile
      - ./static:/usr/share/caddy:ro # Mount the static files
      - caddy_data:/data # Persist Caddy data
      - caddy_config:/config # Persist Caddy config

  database:
    image: postgres:17.4-alpine3.21
    environment:
      POSTGRES_DB: keycloak-db # Database name
      POSTGRES_USER: keycloak-user # Database user
      POSTGRES_PASSWORD: Password123
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d keycloak-db -U keycloak-user"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist Postgres data

  keycloak:
    image: quay.io/keycloak/keycloak:26.1.2
    command: start
    depends_on:
      database:
        condition: service_healthy # Wait for healthy Postgres
    environment:
      # DB configs:
      KC_DB: postgres # Database type
      KC_DB_USERNAME: keycloak-user # Database user
      KC_DB_PASSWORD: Password123
      KC_DB_URL_HOST: database # Database server host. Same as the database service name that we defined above as docker will resolve it using the network created by docker compose
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: keycloak-db # Database name
      # Admin user:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      # Reverse proxy configs:
      KC_PROXY_HEADERS: xforwarded # Use X-Forwarded-For and X-Forwarded-Proto headers for the original client IP and protocol
      KC_HOSTNAME: https://localhost/auth # Keycloak URL under which it will be accessible from the reverse proxy
      KC_HTTP_RELATIVE_PATH: /auth
      KC_HTTP_ENABLED: true # Enable HTTP as we are using a reverse proxy to handle HTTPS termination
      # Monitoring endpoints (use them for internal monitoring only & do not expose them to the public):
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KC_HTTP_MANAGEMENT_RELATIVE_PATH: /management

volumes:
  caddy_data:
  caddy_config:
  postgres_data:
